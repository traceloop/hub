apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if not .Values.management.enabled }}
      # OSS mode - keep existing init container for config processing
      initContainers:
        - name: config-init
          image: busybox:latest
          command: ["sh", "-c"]
          args:
            - |
              cp /config-template/config.yaml /config/config.yaml
              # Dynamic substitution for all API keys
              {{- range $key, $value := .Values.secrets.keyMapping }}
              {{- $upperKey := upper (regexReplaceAll "ApiKey$" $key "") }}
              sed -i "s/{{ $upperKey }}_API_KEY_PLACEHOLDER/${{ $upperKey }}_API_KEY/g" /config/config.yaml
              {{- end }}
          env:
            {{- range $key, $value := .Values.secrets.keyMapping }}
            {{- $upperKey := upper (regexReplaceAll "ApiKey$" $key "") }}
            - name: {{ $upperKey }}_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.secrets.existingSecretName }}
                  key: {{ $value }}
                  optional: {{ ne $key "openaiApiKey" }}
            {{- end }}
          volumeMounts:
            - name: config-template
              mountPath: /config-template
            - name: config-volume
              mountPath: /config
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          # Conditional image selection
          image: "{{ if .Values.ee.enabled }}{{ .Values.ee.image.repository }}{{ else }}{{ .Values.image.repository }}{{ end }}:{{ .Values.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: /app
          env:
            - name: PORT
              value: {{ .Values.service.port | quote }}
            {{- if .Values.ee.enabled }}
            - name: MANAGEMENT_PORT
              value: {{ .Values.service.managementPort | quote }}
            # EE-specific environment variables
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.ee.database.user }}:$(DB_PASSWORD)@{{ .Values.ee.database.host }}:{{ .Values.ee.database.port }}/{{ .Values.ee.database.name }}"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ee.database.existingSecret }}
                  key: {{ .Values.ee.database.passwordKey }}
            - name: DB_POLL_INTERVAL_SECONDS
              value: {{ .Values.ee.config.pollIntervalSeconds | quote }}
            # Dynamic environment variables from arbitrary secrets
            {{- range $envVar, $secretRef := .Values.ee.secrets }}
            - name: {{ $envVar }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretRef.secretName }}
                  key: {{ $secretRef.key }}
                  optional: false
            {{- end }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            {{- if .Values.management.enabled }}
            - name: management
              containerPort: {{ .Values.service.managementPort }}
              protocol: TCP
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds | default 5 }}
            successThreshold: {{ .Values.probes.liveness.successThreshold | default 1 }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold | default 3 }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds | default 5 }}
            successThreshold: {{ .Values.probes.readiness.successThreshold | default 1 }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold | default 3 }}
            {{- if .Values.management.enabled }}
            # Additional health check for management API
            startupProbe:
              httpGet:
                path: /health
                port: management
              initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds | default 10 }}
              periodSeconds: {{ .Values.probes.readiness.periodSeconds | default 10 }}
              timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds | default 5 }}
              successThreshold: {{ .Values.probes.readiness.successThreshold | default 1 }}
              failureThreshold: {{ .Values.probes.readiness.failureThreshold | default 3 }}
            {{- end }}
          volumeMounts:
            {{- if not .Values.management.enabled }}
            # OSS mode - mount config file
            - name: config-volume
              mountPath: /app/config.yaml
              subPath: config.yaml
            {{- end }}
            # EE mode doesn't need config file volume
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if not .Values.management.enabled }}
        # OSS mode volumes
        - name: config-template
          configMap:
            name: {{ include "app.fullname" . }}-config
        - name: config-volume
          emptyDir: {}
        {{- end }}
        # EE mode doesn't need config volumes
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
